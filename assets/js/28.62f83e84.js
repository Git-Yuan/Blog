(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{559:function(s,t,a){"use strict";a.r(t);var n=a(2),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#_1-基本数据类型和引用数据类型（复合数据类型）"}},[s._v("1.基本数据类型和引用数据类型（复合数据类型）")])]),a("li",[a("a",{attrs:{href:"#_2-js中的栈内存和堆内存"}},[s._v("2.js中的栈内存和堆内存")])]),a("li",[a("a",{attrs:{href:"#_3-传值与传址"}},[s._v("3.传值与传址")])])])]),a("p"),s._v(" "),a("h3",{attrs:{id:"_1-基本数据类型和引用数据类型（复合数据类型）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本数据类型和引用数据类型（复合数据类型）"}},[s._v("#")]),s._v(" 1.基本数据类型和引用数据类型（复合数据类型）")]),s._v(" "),a("p",[s._v("要了解javascript中的堆内存和栈内存，我们先要熟悉一下javascript的数据类型。")]),s._v(" "),a("ul",[a("li",[a("p",[a("strong",[s._v("基本数据类型")]),s._v("：基本数据类型主要有"),a("strong",[s._v("string,number,boolean,null,undefiend,symbol")]),s._v("这些数据类型比较简单，而且占的空间大小比较固定，所以这类存储在栈内存中。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("引用数据类型")]),s._v("：引用数据类型有"),a("strong",[s._v("object，function，array")]),s._v("，这类数据占用的空间大，且大小不固定，所以这类数据是存储在堆内存中，但是引用数据类型会在栈中存储一个指针，这个指针指向的就是堆内存中的数据实体，当我们调用该数据时，会先找到栈内存中的储存的指针，再通过这个指针找到堆内存中的数据实体。")])])]),s._v(" "),a("p",[s._v("通过上面的数据类型的存储，我们大概能够了解一点，就是栈内存存储的数据比较小且空间大小固定，而堆内存存储的数据较大，且空间大小不固定。")]),s._v(" "),a("h3",{attrs:{id:"_2-js中的栈内存和堆内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-js中的栈内存和堆内存"}},[s._v("#")]),s._v(" 2.js中的栈内存和堆内存")]),s._v(" "),a("p",[a("strong",[s._v("栈")]),s._v("：栈是一种线性内存，后进先出，就像一个杯子容器，最先放进去的东西，要等到上面的东西取出来了之后才能取出来。栈会自动分配内存空间，会自动释放。在垃圾回收方面，栈内存变量在使用完之后就回收了。")]),s._v(" "),a("p",[a("strong",[s._v("堆")]),s._v("：堆内存是一个二叉树结构，每一个结点都有一个值，动态的分配内存，不会自动释放内存，它就像一颗倒过来的树。堆的存取是随意的，只要我们有数据存放的地址，我们就能获取到这个数据。而在垃圾回收方面，堆内存里面的变量牵扯太多，只有当所有调用的变量全部销毁才能回收。")]),s._v(" "),a("h3",{attrs:{id:"_3-传值与传址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-传值与传址"}},[s._v("#")]),s._v(" 3.传值与传址")]),s._v(" "),a("p",[a("img",{attrs:{src:"/Blog/img/front/%E6%A0%88%E5%92%8C%E5%A0%86.png",alt:""}}),s._v("\n在上面我们已经了解到基本数据类型是存放在栈内存中的，所以在定义一个基本数据类型的变量，直接在栈内存中分配新的内存空间并存储相应的值。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//20")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//20 2")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("上面代码中，先声明了a变量，并将10赋值给a，之后将20赋值给a，a变量变为20，再声明了b变量，将a的值（20）赋值给b变量，之后再改变b的值，这里就仅仅是是改变b的值，因为存放b变量的内存空间和存放a变量的内存空间是不一样的，每个变量都有自己对应值的存储空间，且互相之间没有关联。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"aaaaa"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        b"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"123456"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        c"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abc"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ccccc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//ccccc")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("上述代码中，声明了一个引用数据类型（object）,这时候会在堆内存空间中存储这个对象，而在栈内存中会储存该对象的指针地址，之后该地址的值赋值给obj，之后声明一个x变量，并且将obj赋值给x，这时候赋值给x的只是堆内存中的obj对象的指针地址，所以在x对a属性进行修改的时候，修改的是在堆内存中的obj对象，而只要值是obj对象地址的变量都能对obj对象进行调用以及修改。而es6中有一个const方法声明常量，用const声明的常量是不能修改的，那也仅限于声明的是基本数据类型，如果const声明的是引用数据类型，那么栈内存中保存的指针地址是无法改变的，但堆内存的对象是可以修改属性的。\n"),a("img",{attrs:{src:"/Blog/img/front/%E6%A0%88%E5%92%8C%E5%A0%86-1.png",alt:""}})]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[s._v("在使用new关键字来初始化的变量时存储在堆内存中的，因为new关键字是根据构造函数来生成实例对象的，这个时候生成的是对象，而不是基本类型。")])])])}),[],!1,null,null,null);t.default=r.exports}}]);